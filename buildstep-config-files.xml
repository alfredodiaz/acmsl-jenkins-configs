<?xml version='1.0' encoding='UTF-8'?>
<org.jenkinsci.plugins.managedscripts.ScriptBuildStepConfigProvider plugin="managed-scripts@1.1.1">
  <configs>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1418968682584</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1418968682584</id>
        <name>mvn-versions-update</name>
        <comment>Synchronizes versions with remote repositories</comment>
        <content>#!/bin/bash

cd /home/jenkins/workspace/$1
/opt/apache-maven/bin/mvn -U versions:update-properties</content>
        <args>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>job</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
        </args>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1419877655367</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1419877655367</id>
        <name>Use BUILD_NUMBER to generate a new version</name>
        <comment>Creates a new version</comment>
        <content>cd &quot;${WORKSPACE}&quot;;
export MAJOR=$(grep -A 5 &apos;&lt;version.major&gt;&apos; pom.xml | head -n 1 | cut -d &apos;&gt;&apos; -f 2 | cut -d &apos;&lt;&apos; -f 1);
export MINOR=$(grep -A 5 &apos;&lt;version.minor&gt;&apos; pom.xml | head -n 1 | cut -d &apos;&gt;&apos; -f 2 | cut -d &apos;&lt;&apos; -f 1);
if [ ! -d target ]; then mkdir &quot;${WORKSPACE}&quot;/target; fi;
#export SEQ=&quot;$(printf &quot;%04d\n&quot; ${BUILD_NUMBER})&quot;;
export SEQ=&quot;${BUILD_NUMBER}&quot;;
echo &quot;${MAJOR}.${MINOR}.${SEQ}&quot; &gt; &quot;${WORKSPACE}&quot;/target/.version;
</content>
        <args/>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1418970428534</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1418970428534</id>
        <name>Change version to the new one</name>
        <comment>Second step in the Continuous Delivery process.</comment>
        <content>#!/bin/bash

cd &quot;${WORKSPACE}&quot;;
echo &quot;TAG_NAME=$(cat &quot;${WORKSPACE}&quot;/target/.version)&quot;;
/opt/apache-maven/bin/mvn -o versions:set -DnewVersion=$(cat &quot;${WORKSPACE}&quot;/target/.version)</content>
        <args/>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1418970260380</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1418970260380</id>
        <name>Create local branch for the new version</name>
        <comment>First step in the Continuous Delivery process flow.</comment>
        <content>#!/bin/bash

cd &quot;${WORKSPACE}&quot;;
export ARTIFACT=&quot;${1}&quot;;
if [ ! -d target ]; then mkdir target; fi;
/opt/apache-maven/bin/mvn -o versions:update-parent | grep &quot;Updating parent from &quot; | tail -n 1 | cut -d&apos; &apos; -f 7 | awk -F&apos;.&apos; &apos;{printf(&quot;%s.%s.%d\n&quot;, $1, $2, $3);}&apos; &gt; &quot;${WORKSPACE}&quot;/target/.version;
echo &quot;** VERSION: $(cat &quot;${WORKSPACE}&quot;/target/.version)&quot;;
git checkout -b ${ARTIFACT}-$(cat &quot;${WORKSPACE}&quot;/target/.version);</content>
        <args>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>artifact</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
        </args>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1419853730419</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1419853730419</id>
        <name>Changes trigger property and updates all versions</name>
        <comment>Overrides the property &lt;version.${trigger}&gt; in the pom.xml</comment>
        <content>cd &quot;${WORKSPACE}&quot;;
export CHILD=&quot;$1&quot;;
export NEW_VERSION=&quot;$(cat &quot;${WORKSPACE}&quot;/target/.version)&quot;;
sed -i &quot;s &lt;version.${CHILD}&gt;\(.*\)&lt;/version.${CHILD}&gt; &lt;version.${CHILD}&gt;${NEW_VERSION}&lt;/version.${CHILD}&gt; g&quot; pom.xml;
/opt/apache-maven/bin/mvn versions:update-properties;</content>
        <args>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>child</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
        </args>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1418970628924</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1418970628924</id>
        <name>mvn release:prepare</name>
        <comment>The fourth step in the Continuous Delivery process</comment>
        <content>#!/bin/bash

cd &quot;${WORKSPACE}&quot;;

_group=&quot;$1&quot;;
if [ &quot;x${_group}&quot; == &quot;x&quot; ]; then
  echo &quot;Group is mandatory&quot;;
  exit 1;
else
  shift;
fi
_artifact=&quot;$1&quot;;
if [ &quot;x${_artifact}&quot; == &quot;x&quot; ]; then
  echo &quot;Artifact is mandatory&quot;;
  exit 1;
else
  shift;
fi
_repo=&quot;$1&quot;;
if [ &quot;x${_repo}&quot; == &quot;x&quot; ]; then
  echo &quot;Repo is mandatory&quot;;
  exit 1;
else
  shift;
fi
_version=&quot;$(cat &quot;${WORKSPACE}&quot;/target/.version)&quot;;
if [ &quot;x${_version}&quot; == &quot;x&quot; ]; then
  echo &quot;Version is mandatory&quot;;
  exit 1;
fi

cat &lt;&lt;EOF &gt; release.properties
scm.commentPrefix=
pushChanges=true
dependency.${_group}\:${_artifact}.development=latest-SNAPSHOT
project.scm.${_group}\:${_artifact}.connection=scm\:git\:${_repo}
scm.tag=${_artifact}-${_version}
scm.tagBase=${_repo}
remoteTagging=true
exec.additionalArguments=
project.dev.${_group}\:${_artifact}=latest-SNAPSHOT
project.scm.${_group}\:${_artifact}.tag=HEAD
scm.url=scm\:git\:${_repo}
scm.tagNameFormat=@{project.artifactId}-@{project.version}
commitByProject=true
preparationGoals=clean verify
project.scm.${_group}\:${_artifact}.url=${_repo}
exec.snapshotReleasePluginAllowed=false
project.scm.${_group}\:${_artifact}.developerConnection=scm\:git\:${_repo}
dependency.${_group}\:${_artifact}.release=${_version}
project.rel.${_group}\:${_artifact}=${_version}
completedPhase=end-release
EOF</content>
        <args>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>groupId</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>artifactId</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>repository</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
        </args>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1419853924346</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1419853924346</id>
        <name>mvn release:perform</name>
        <comment>Runs Maven release plugin</comment>
        <content>cd &quot;${WORKSPACE}&quot;;
/opt/apache-maven/bin/mvn -Prelease release:perform</content>
        <args/>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1418970913920</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1418970913920</id>
        <name>Delete temporary branch</name>
        <comment>Fifth step in the Continuous Delivery process</comment>
        <content>#!/bin/bash

cd ${WORKSPACE};
export ARTIFACT=&quot;${1}&quot;;
git branch -D ${ARTIFACT}-$(cat &quot;${WORKSPACE}&quot;/target/.version);</content>
        <args>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>artifactId</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
        </args>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
    <entry>
      <string>org.jenkinsci.plugins.managedscripts.ScriptConfig1418970530784</string>
      <org.jenkinsci.plugins.managedscripts.ScriptConfig>
        <id>org.jenkinsci.plugins.managedscripts.ScriptConfig1418970530784</id>
        <name>Push new tag</name>
        <comment>Third step in the Continuous Delivery process</comment>
        <content>#!/bin/bash

cd &quot;${WORKSPACE}&quot;;
export ARTIFACT=&quot;${1}&quot;;
git add */pom.xml 2&gt; /dev/null;
git add pom.xml &amp;&amp; git commit -m&quot;Releasing $(cat &quot;${WORKSPACE}&quot;/target/.version)&quot; &amp;&amp; \
git tag -a &quot;${ARTIFACT}-$(cat &quot;${WORKSPACE}&quot;/target/.version)&quot; -m&quot;Releasing $(cat &quot;${WORKSPACE}&quot;/target/.version)&quot; &amp;&amp; git push origin --tags;
export NEW_GIT_TAG=&quot;${ARTIFACT}-$(cat &quot;${WORKSPACE}&quot;/target/.version)&quot;;</content>
        <args>
          <org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
            <name>artifact</name>
          </org.jenkinsci.plugins.managedscripts.ScriptConfig_-Arg>
        </args>
      </org.jenkinsci.plugins.managedscripts.ScriptConfig>
    </entry>
  </configs>
</org.jenkinsci.plugins.managedscripts.ScriptBuildStepConfigProvider>